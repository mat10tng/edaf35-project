
;; Function get_buddy (get_buddy, funcdef_no=0, decl_uid=3107, cgraph_uid=0)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=74 from oldreg=63, assigning class GENERAL_REGS to r74
   11: {r74:DI=r74:DI-r62:DI;clobber flags:CC;}
      REG_DEAD r62:DI
      REG_DEAD r60:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   32: r74:DI=r60:DI
    Inserting insn reload after:
   33: r63:DI=r74:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=75 from oldreg=65, assigning class GENERAL_REGS to r75
      Creating newreg=76, assigning class CREG to r76
   15: {r75:SI=r75:SI<<r76:QI;clobber flags:CC;}
      REG_DEAD r72:SI
      REG_DEAD r64:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   34: r75:SI=r72:SI
   36: r76:QI=r64:SI#0
    Inserting insn reload after:
   35: r65:SI=r75:SI

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 17
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*xordi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 29: point = 0
   Insn 26: point = 0
   Insn 22: point = 1
   Insn 19: point = 3
   Insn 18: point = 5
   Insn 17: point = 7
   Insn 16: point = 9
   Insn 35: point = 11
	Hard reg 0 is preferable by r75 with profit 1
   Insn 15: point = 13
   Insn 36: point = 14
   Insn 34: point = 16
	Hard reg 0 is preferable by r75 with profit 1
	Hard reg 4 is preferable by r75 with profit 1
   Insn 14: point = 18
   Insn 13: point = 19
   Insn 12: point = 21
   Insn 33: point = 22
	Hard reg 5 is preferable by r74 with profit 1
   Insn 11: point = 24
   Insn 32: point = 25
	Hard reg 5 is preferable by r74 with profit 1
	Hard reg 2 is preferable by r74 with profit 1
   Insn 10: point = 27
   Insn 9: point = 29
   Insn 8: point = 30
   Insn 7: point = 31
   Insn 3: point = 32
   Insn 2: point = 32
 r59: [4..31]
 r60: [26..30]
 r61: [28..29]
 r62: [24..27]
 r63: [8..22]
 r64: [15..19]
 r65: [10..11]
 r66: [8..9]
 r67: [6..7]
 r68: [4..5]
 r69: [2..3]
 r70: [0..1]
 r71: [20..21]
 r72: [17..18]
 r74: [23..25]
 r75: [12..16]
 r76: [13..14]
Compressing live ranges: from 32 to 26 - 81%
Ranges after the compression:
 r59: [4..25]
 r60: [22..25]
 r61: [24..25]
 r62: [20..23]
 r63: [8..19]
 r64: [14..17]
 r65: [10..11]
 r66: [8..9]
 r67: [6..7]
 r68: [4..5]
 r69: [2..3]
 r70: [0..1]
 r71: [18..19]
 r72: [16..17]
 r74: [20..21]
 r75: [12..15]
 r76: [12..13]
	 Assigning to 76 (cl=CREG, orig=76, freq=2, tfirst=76, tfreq=2)...
	   Assign 2 to reload r76 (freq=2)
	 Assigning to 74 (cl=GENERAL_REGS, orig=63, freq=3, tfirst=74, tfreq=3)...
	   Assign 5 to reload r74 (freq=3)
	 Assigning to 75 (cl=GENERAL_REGS, orig=65, freq=3, tfirst=75, tfreq=3)...
	   Assign 4 to reload r75 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 12
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns


get_buddy

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={12d,12u} r1={2d,1u} r2={3d,2u} r4={4d,4u} r5={4d,4u} r6={1d,6u} r7={1d,2u} r17={4d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 74{42d,32u,0e} in 23{23 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ptr+0 S8 A64])
        (reg:DI 5 di [ ptr ])) malloc.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ ptr ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 kval+0 S8 A64])
        (reg:DI 4 si [ kval ])) malloc.c:23 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ kval ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 1 dx [orig:59 base_addr.0 ] [59])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 2 cx [orig:60 ptr.1 ] [60])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ptr+0 S8 A64])) malloc.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:61 base_addr.2 ] [61])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 32 2 (set (reg:DI 0 ax [orig:62 base_addr.3 ] [62])
        (reg/f:DI 0 ax [orig:61 base_addr.2 ] [61])) malloc.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 base_addr.2 ] [61])
        (nil)))
(insn 32 10 11 2 (set (reg:DI 5 di [orig:63 D.3311 ] [63])
        (reg:DI 2 cx [orig:60 ptr.1 ] [60])) malloc.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:60 ptr.1 ] [60])
        (nil)))
(insn 11 32 33 2 (parallel [
            (set (reg:DI 5 di [orig:63 D.3311 ] [63])
                (minus:DI (reg:DI 5 di [orig:63 D.3311 ] [63])
                    (reg:DI 0 ax [orig:62 base_addr.3 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:24 310 {*subdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 base_addr.3 ] [62])
        (nil)))
(insn 33 11 12 2 (set (reg:DI 5 di [orig:63 D.3311 ] [63])
        (reg:DI 5 di [orig:63 D.3311 ] [63])) malloc.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [orig:63 D.3311 ] [63])
        (nil)))
(insn 12 33 13 2 (set (reg:DI 0 ax [71])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 kval+0 S8 A64])) malloc.c:24 87 {*movdi_internal_rex64}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:64 D.3312 ] [64])
        (reg:SI 0 ax [71])) malloc.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [71])
        (nil)))
(insn 14 13 34 2 (set (reg:SI 4 si [72])
        (const_int 1 [0x1])) malloc.c:24 89 {*movsi_internal}
     (nil))
(insn 34 14 36 2 (set (reg:SI 4 si [orig:65 D.3312 ] [65])
        (reg:SI 4 si [72])) malloc.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [72])
        (nil)))
(insn 36 34 15 2 (set (reg:QI 2 cx [76])
        (reg:QI 0 ax [orig:64 D.3312 ] [64])) malloc.c:24 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:64 D.3312 ] [64])
        (nil)))
(insn 15 36 35 2 (parallel [
            (set (reg:SI 4 si [orig:65 D.3312 ] [65])
                (ashift:SI (reg:SI 4 si [orig:65 D.3312 ] [65])
                    (reg:QI 2 cx [76])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:24 521 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [76])
        (nil)))
(insn 35 15 16 2 (set (reg:SI 0 ax [orig:65 D.3312 ] [65])
        (reg:SI 4 si [orig:65 D.3312 ] [65])) malloc.c:24 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:65 D.3312 ] [65])
        (nil)))
(insn 16 35 17 2 (set (reg:DI 0 ax [orig:66 D.3311 ] [66])
        (sign_extend:DI (reg:SI 0 ax [orig:65 D.3312 ] [65]))) malloc.c:24 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:65 D.3312 ] [65])
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 0 ax [orig:67 D.3311 ] [67])
                (xor:DI (reg:DI 0 ax [orig:66 D.3311 ] [66])
                    (reg:DI 5 di [orig:63 D.3311 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:24 424 {*xordi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 D.3311 ] [66])
        (expr_list:REG_DEAD (reg:DI 5 di [orig:63 D.3311 ] [63])
            (nil))))
(insn 18 17 19 2 (set (reg:DI 0 ax [orig:68 D.3313 ] [68])
        (reg:DI 0 ax [orig:67 D.3311 ] [67])) malloc.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 D.3311 ] [67])
        (nil)))
(insn 19 18 22 2 (parallel [
            (set (reg/f:DI 0 ax [orig:69 D.3314 ] [69])
                (plus:DI (reg:DI 0 ax [orig:68 D.3313 ] [68])
                    (reg/f:DI 1 dx [orig:59 base_addr.0 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:24 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:68 D.3313 ] [68])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:59 base_addr.0 ] [59])
            (nil))))
(insn 22 19 26 2 (set (reg:DI 0 ax [orig:70 <retval> ] [70])
        (reg/f:DI 0 ax [orig:69 D.3314 ] [69])) malloc.c:24 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.3314 ] [69])
        (nil)))
(insn 26 22 29 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:70 <retval> ] [70])) malloc.c:25 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:70 <retval> ] [70])
        (nil)))
(insn 29 26 0 2 (use (reg/i:DI 0 ax)) malloc.c:25 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function split_block (split_block, funcdef_no=1, decl_uid=3110, cgraph_uid=1)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 13:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=98 from oldreg=61, assigning class GENERAL_REGS to r98
      Creating newreg=99, assigning class CREG to r99
   17: {r98:SI=r98:SI<<r99:QI;clobber flags:CC;}
      REG_DEAD r72:SI
      REG_DEAD r60:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   67: r98:SI=r72:SI
   69: r99:QI=r60:SI#0
    Inserting insn reload after:
   68: r61:SI=r98:SI

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) rmWz {*zero_extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 28:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 29:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 35:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =q  (1) q {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 40:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) q  (1) qm {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 44:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rem {*movdi_internal_rex64}

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 64: point = 0
   Insn 61: point = 0
   Insn 57: point = 1
   Insn 54: point = 3
   Insn 53: point = 4
   Insn 52: point = 5
   Insn 51: point = 6
   Insn 50: point = 7
   Insn 49: point = 8
   Insn 48: point = 9
   Insn 47: point = 10
   Insn 46: point = 11
   Insn 45: point = 12
   Insn 44: point = 13
   Insn 43: point = 14
   Insn 42: point = 15
   Insn 41: point = 17
   Insn 40: point = 18
   Insn 39: point = 19
   Insn 38: point = 20
   Insn 37: point = 22
   Insn 36: point = 23
   Insn 35: point = 24
   Insn 34: point = 26
   Insn 31: point = 27
   Insn 30: point = 28
   Insn 29: point = 29
   Insn 28: point = 31
   Insn 25: point = 32
   Insn 24: point = 33
   Insn 23: point = 34
   Insn 22: point = 36
   Insn 18: point = 37
   Insn 68: point = 39
	Hard reg 0 is preferable by r98 with profit 1
   Insn 17: point = 41
   Insn 69: point = 42
   Insn 67: point = 44
	Hard reg 0 is preferable by r98 with profit 1
	Hard reg 1 is preferable by r98 with profit 1
   Insn 16: point = 46
   Insn 15: point = 47
   Insn 14: point = 49
   Insn 13: point = 50
   Insn 12: point = 50
   Insn 11: point = 51
   Insn 10: point = 52
   Insn 9: point = 54
   Insn 8: point = 55
   Insn 7: point = 56
   Insn 6: point = 58
   Insn 2: point = 59
 r59: [50..52]
 r60: [43..47]
 r61: [38..39]
 r62: [35..37]
 r63: [18..20]
 r64: [13..15]
 r65: [2..3]
 r66: [0..1]
 r67: [57..58]
 r68: [55..56]
 r69: [53..54]
 r70: [50..51]
 r71: [48..49]
 r72: [45..46]
 r75: [33..34]
 r76: [35..36]
 r77: [28..32]
 r80: [30..31]
 r81: [28..29]
 r82: [23..27]
 r85: [25..26]
 r86: [23..24]
 r87: [21..22]
 r88: [18..19]
 r89: [16..17]
 r90: [13..14]
 r91: [10..12]
 r92: [10..11]
 r93: [7..9]
 r94: [7..8]
 r95: [4..6]
 r96: [4..5]
 r98: [40..44]
 r99: [41..42]
Compressing live ranges: from 59 to 48 - 81%
Ranges after the compression:
 r59: [40..41]
 r60: [34..37]
 r61: [30..31]
 r62: [28..29]
 r63: [14..15]
 r64: [10..11]
 r65: [2..3]
 r66: [0..1]
 r67: [46..47]
 r68: [44..45]
 r69: [42..43]
 r70: [40..41]
 r71: [38..39]
 r72: [36..37]
 r75: [26..27]
 r76: [28..29]
 r77: [22..25]
 r80: [24..25]
 r81: [22..23]
 r82: [18..21]
 r85: [20..21]
 r86: [18..19]
 r87: [16..17]
 r88: [14..15]
 r89: [12..13]
 r90: [10..11]
 r91: [8..9]
 r92: [8..9]
 r93: [6..7]
 r94: [6..7]
 r95: [4..5]
 r96: [4..5]
 r98: [32..35]
 r99: [32..33]
	 Assigning to 99 (cl=CREG, orig=99, freq=2, tfirst=99, tfreq=2)...
	   Assign 2 to reload r99 (freq=2)
	 Assigning to 98 (cl=GENERAL_REGS, orig=61, freq=3, tfirst=98, tfreq=3)...
	   Assign 1 to reload r98 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 23
changing reg in insn 38
changing reg in insn 40
changing reg in insn 42
changing reg in insn 44
changing reg in insn 54
changing reg in insn 57
changing reg in insn 57
changing reg in insn 61
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 22
changing reg in insn 25
changing reg in insn 30
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 52
changing reg in insn 53
starting the processing of deferred insns
ending the processing of deferred insns


split_block

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={22d,24u} r1={15d,14u,1e} r2={2d,1u} r4={1d} r5={1d,1u} r6={1d,25u} r7={1d,2u} r17={5d} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 129{59d,68u,2e} in 49{49 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 75 76 77 80 81 82 85 86 87 88 89 90 91 92 93 94 95 96
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])
        (reg:DI 5 di [ kval ])) malloc.c:28 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ kval ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [67])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])) malloc.c:31 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [68])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [67])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:31 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])
        (reg/f:DI 0 ax [68])) malloc.c:31 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [68])
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 1 dx [orig:59 D.3315 ] [59])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [69])
                (const_int 8 [0x8])) [0 child_1_2->succ+0 S8 A64])) malloc.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (nil)))
(insn 11 10 12 2 (set (reg:DI 0 ax [70])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])) malloc.c:32 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [70])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])
        (reg/f:DI 1 dx [orig:59 D.3315 ] [59])) malloc.c:32 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [70])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:59 D.3315 ] [59])
            (nil))))
(insn 13 12 14 2 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:34 274 {*adddi_1}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [71])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])) malloc.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [orig:60 D.3316 ] [60])
        (reg:SI 0 ax [71])) malloc.c:36 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [71])
        (nil)))
(insn 16 15 67 2 (set (reg:SI 1 dx [72])
        (const_int 1 [0x1])) malloc.c:36 89 {*movsi_internal}
     (nil))
(insn 67 16 69 2 (set (reg:SI 1 dx [orig:61 D.3317 ] [61])
        (reg:SI 1 dx [72])) malloc.c:36 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [72])
        (nil)))
(insn 69 67 17 2 (set (reg:QI 2 cx [99])
        (reg:QI 0 ax [orig:60 D.3316 ] [60])) malloc.c:36 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.3316 ] [60])
        (nil)))
(insn 17 69 68 2 (parallel [
            (set (reg:SI 1 dx [orig:61 D.3317 ] [61])
                (ashift:SI (reg:SI 1 dx [orig:61 D.3317 ] [61])
                    (reg:QI 2 cx [99])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:36 521 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [99])
        (nil)))
(insn 68 17 18 2 (set (reg:SI 0 ax [orig:61 D.3317 ] [61])
        (reg:SI 1 dx [orig:61 D.3317 ] [61])) malloc.c:36 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:61 D.3317 ] [61])
        (nil)))
(insn 18 68 22 2 (set (reg:DI 1 dx [orig:62 D.3318 ] [62])
        (zero_extend:DI (reg:SI 0 ax [orig:61 D.3317 ] [61]))) malloc.c:36 139 {*zero_extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.3317 ] [61])
        (nil)))
(insn 22 18 23 2 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:36 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg:DI 0 ax [75])
                (plus:DI (reg/f:DI 0 ax [76])
                    (reg:DI 1 dx [orig:62 D.3318 ] [62])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:36 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (expr_list:REG_DEAD (reg:DI 1 dx [orig:62 D.3318 ] [62])
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])
                    (reg:DI 1 dx [orig:62 D.3318 ] [62]))
                (nil)))))
(insn 24 23 25 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 child_2+0 S8 A64])
        (reg:DI 0 ax [75])) malloc.c:36 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [75])
        (nil)))
(insn 25 24 28 2 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:37 87 {*movdi_internal_rex64}
     (nil))
(insn 28 25 29 2 (set (reg:QI 1 dx [80])
        (mem/j:QI (reg/f:DI 0 ax [77]) [0 child_1_2->reserved+0 S1 A64])) malloc.c:37 91 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:QI 1 dx [81])
                (and:QI (reg:QI 1 dx [80])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:37 405 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 1 dx [80])
        (nil)))
(insn 30 29 31 2 (set (mem/j:QI (reg/f:DI 0 ax [77]) [0 child_1_2->reserved+0 S1 A64])
        (reg:QI 1 dx [81])) malloc.c:37 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 1 dx [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
            (nil))))
(insn 31 30 34 2 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 child_2+0 S8 A64])) malloc.c:38 87 {*movdi_internal_rex64}
     (nil))
(insn 34 31 35 2 (set (reg:QI 1 dx [85])
        (mem/j:QI (reg/f:DI 0 ax [82]) [0 child_2_8->reserved+0 S1 A64])) malloc.c:38 91 {*movqi_internal}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:QI 1 dx [86])
                (and:QI (reg:QI 1 dx [85])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:38 405 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 1 dx [85])
        (nil)))
(insn 36 35 37 2 (set (mem/j:QI (reg/f:DI 0 ax [82]) [0 child_2_8->reserved+0 S1 A64])
        (reg:QI 1 dx [86])) malloc.c:38 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 1 dx [86])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
            (nil))))
(insn 37 36 38 2 (set (reg:DI 0 ax [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])) malloc.c:39 87 {*movdi_internal_rex64}
     (nil))
(insn 38 37 39 2 (set (reg:QI 1 dx [orig:63 D.3319 ] [63])
        (reg:QI 0 ax [87])) malloc.c:39 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(insn 39 38 40 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 child_2+0 S8 A64])) malloc.c:39 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 2 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 1 [0x1])) [0 child_2_8->kval+0 S1 A8])
        (reg:QI 1 dx [orig:63 D.3319 ] [63])) malloc.c:39 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
        (expr_list:REG_DEAD (reg:QI 1 dx [orig:63 D.3319 ] [63])
            (nil))))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 child_2+0 S8 A64])) malloc.c:39 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (reg:QI 1 dx [orig:64 D.3319 ] [64])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 1 [0x1])) [0 child_2_8->kval+0 S1 A8])) malloc.c:39 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
        (nil)))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:39 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 2 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 1 [0x1])) [0 child_1_2->kval+0 S1 A8])
        (reg:QI 1 dx [orig:64 D.3319 ] [64])) malloc.c:39 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [90])
        (expr_list:REG_DEAD (reg:QI 1 dx [orig:64 D.3319 ] [64])
            (nil))))
(insn 45 44 46 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 46 45 47 2 (set (reg/f:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 child_2+0 S8 A64])) malloc.c:41 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 8 [0x8])) [0 child_1_2->succ+0 S8 A64])
        (reg/f:DI 1 dx [92])) malloc.c:41 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [92])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [91])
            (nil))))
(insn 48 47 49 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 child_2+0 S8 A64])) malloc.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 49 48 50 2 (set (reg/f:DI 1 dx [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:42 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 16 [0x10])) [0 child_2_8->pred+0 S8 A64])
        (reg/f:DI 1 dx [94])) malloc.c:42 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [94])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [93])
            (nil))))
(insn 51 50 52 2 (set (reg:DI 0 ax [95])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])) malloc.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 2 (set (reg/f:DI 1 dx [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:44 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 2 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [95])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])
        (reg/f:DI 1 dx [96])) malloc.c:44 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [96])
        (expr_list:REG_DEAD (reg:DI 0 ax [95])
            (nil))))
(insn 54 53 57 2 (set (reg/f:DI 0 ax [orig:65 D.3320 ] [65])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 child_1+0 S8 A64])) malloc.c:46 87 {*movdi_internal_rex64}
     (nil))
(insn 57 54 61 2 (set (reg:DI 0 ax [orig:66 <retval> ] [66])
        (reg/f:DI 0 ax [orig:65 D.3320 ] [65])) malloc.c:46 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.3320 ] [65])
        (nil)))
(insn 61 57 64 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:66 <retval> ] [66])) malloc.c:47 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:66 <retval> ] [66])
        (nil)))
(insn 64 61 0 2 (use (reg/i:DI 0 ax)) malloc.c:47 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function find_block (find_block, funcdef_no=2, decl_uid=3115, cgraph_uid=2)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) Z {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 28
changing reg in insn 16
changing reg in insn 31
changing reg in insn 12
changing reg in insn 13
changing reg in insn 31
changing reg in insn 35
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


find_block

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={8d,7u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,16u} r7={1d,8u} r17={3d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 63{28d,35u,0e} in 17{17 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 62
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])
        (reg:DI 5 di [ kval ])) malloc.c:50 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ kval ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [62])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 kval+0 S8 A64])) malloc.c:52 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 41 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
        (reg:DI 0 ax [62])) malloc.c:52 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [62])
        (nil)))
(jump_insn 41 7 42 2 (set (pc)
        (label_ref 22)) malloc.c:52 659 {jump}
     (nil)
 -> 22)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 42 41 24)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 63
(code_label 24 42 10 3 9 "" [1 uses])
(note 10 24 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:DI 0 ax [63])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) malloc.c:53 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:60 D.3322 ] [60])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [63])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:53 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [63])
        (nil)))
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:60 D.3322 ] [60])
            (const_int 0 [0]))) malloc.c:53 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 D.3322 ] [60])
        (nil)))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) malloc.c:53 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 43 4 (set (reg:DI 0 ax [orig:59 D.3321 ] [59])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) malloc.c:54 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 43 16 44 4 (set (pc)
        (label_ref 29)) malloc.c:54 659 {jump}
     (nil)
 -> 29)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 44 43 19)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 19 44 20 5 7 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:52 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 22 21 23 6 6 "" [1 uses])
(note 23 22 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 23 26 6 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
            (const_int 24 [0x18]))) malloc.c:52 8 {*cmpdi_1}
     (nil))
(jump_insn 26 25 27 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) malloc.c:52 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 24)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 27 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 7 (set (reg:DI 0 ax [orig:59 D.3321 ] [59])
        (const_int 0 [0])) malloc.c:56 87 {*movdi_internal_rex64}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 61
(code_label 29 28 30 8 8 "" [1 uses])
(note 30 29 31 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 35 8 (set (reg:DI 0 ax [orig:61 <retval> ] [61])
        (reg:DI 0 ax [orig:59 D.3321 ] [59])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.3321 ] [59])
        (nil)))
(insn 35 31 38 8 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:61 <retval> ] [61])) malloc.c:57 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 <retval> ] [61])
        (nil)))
(insn 38 35 0 8 (use (reg/i:DI 0 ax)) malloc.c:57 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function powertwo (powertwo, funcdef_no=3, decl_uid=3122, cgraph_uid=3)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 12:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*cmpdi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rem {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 20
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns


powertwo

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,15u} r7={1d,5u} r17={3d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 53{25d,28u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 size+0 S8 A64])
        (reg:DI 5 di [ size ])) malloc.c:60 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ size ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S8 A64])
        (const_int 0 [0])) malloc.c:62 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 33 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S8 A64])
        (const_int 1 [0x1])) malloc.c:63 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 33 7 34 2 (set (pc)
        (label_ref 13)) malloc.c:64 659 {jump}
     (nil)
 -> 13)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 15)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 15 34 10 3 12 "" [1 uses])
(note 10 15 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S8 A64])
                (ashift:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:65 522 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 12 11 13 3 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:66 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61
(code_label 13 12 14 4 11 "" [1 uses])
(note 14 13 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 14 17 4 (set (reg:DI 0 ax [61])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S8 A64])) malloc.c:64 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 4 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [61])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 size+0 S8 A64]))) malloc.c:64 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [61])
        (nil)))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) malloc.c:64 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 15)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 59 60
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 23 5 (set (reg:DI 0 ax [orig:59 D.3323 ] [59])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S8 A64])) malloc.c:68 87 {*movdi_internal_rex64}
     (nil))
(insn 23 20 27 5 (set (reg:DI 0 ax [orig:60 <retval> ] [60])
        (reg:DI 0 ax [orig:59 D.3323 ] [59])) malloc.c:68 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:59 D.3323 ] [59])
        (nil)))
(insn 27 23 30 5 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:60 <retval> ] [60])) malloc.c:69 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 <retval> ] [60])
        (nil)))
(insn 30 27 0 5 (use (reg/i:DI 0 ax)) malloc.c:69 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function malloc (malloc, funcdef_no=4, decl_uid=975, cgraph_uid=4)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
          alt=0,overall=9,losers=1 -- reject
          alt=1,overall=17,losers=2 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 1 in insn 42:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rm {*cmpdi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=9,losers=1 -- reject
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 57:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 58:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=18,losers=2 -- reject
          alt=3,overall=18,losers=2 -- reject
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 96:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 105:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 106:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 113
changing reg in insn 88
changing reg in insn 64
changing reg in insn 29
changing reg in insn 116
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 60
changing reg in insn 62
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 84
changing reg in insn 85
changing reg in insn 116
changing reg in insn 120
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 106
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 111.


malloc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={46d,40u} r1={15d,5u} r2={10d} r4={13d,3u} r5={19d,10u} r6={1d,38u} r7={1d,21u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={18d,4u} r18={9d} r19={9d} r20={1d,1u,2e} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 600{476d,122u,2e} in 90{81 regular + 9 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 size+0 S8 A64])
        (reg:DI 5 di [ size ])) malloc.c:72 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ size ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:60 base_addr.4 ] [60])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:60 base_addr.4 ] [60])) malloc.c:75 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:60 base_addr.4 ] [60])
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f4483222720 *.LC0>)) malloc.c:75 87 {*movdi_internal_rex64}
     (nil))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) malloc.c:75 91 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f448341ec00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) malloc.c:75 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:61 base_addr.5 ] [61])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:77 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:61 base_addr.5 ] [61])
            (const_int 0 [0]))) malloc.c:77 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 base_addr.5 ] [61])
        (nil)))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) malloc.c:77 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 67)
;;  succ:       3 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 68 69 70 71
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 0 ax [68])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 size+0 S8 A64])) malloc.c:78 87 {*movdi_internal_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 0 ax [orig:62 D.3325 ] [62])
                (plus:DI (reg:DI 0 ax [68])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:78 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [68])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [0 size+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:62 D.3325 ] [62])) malloc.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 D.3325 ] [62])
        (nil)))
(call_insn 18 17 19 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("powertwo") [flags 0x3]  <function_decl 0x7f44831d5800 powertwo>) [0 powertwo S1 A8])
            (const_int 0 [0]))) malloc.c:78 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [69])
        (reg:DI 0 ax)) malloc.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 20 19 21 3 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 K+0 S8 A64])
        (reg:DI 0 ax [69])) malloc.c:78 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [69])
        (nil)))
(insn 21 20 22 3 (set (reg:DI 0 ax [70])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 K+0 S8 A64])) malloc.c:79 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [70])) malloc.c:79 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [70])
        (nil)))
(call_insn 23 22 24 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("find_block") [flags 0x3]  <function_decl 0x7f44831d5700 find_block>) [0 find_block S1 A8])
            (const_int 0 [0]))) malloc.c:79 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 3 (set (reg:DI 0 ax [71])
        (reg:DI 0 ax)) malloc.c:79 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 25 24 26 3 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 J+0 S8 A64])
        (reg:DI 0 ax [71])) malloc.c:79 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [71])
        (nil)))
(insn 26 25 27 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 J+0 S8 A64])
            (const_int 0 [0]))) malloc.c:80 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) malloc.c:80 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 32)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 126 4 (set (reg/f:DI 0 ax [orig:59 D.3324 ] [59])
        (const_int 0 [0])) malloc.c:80 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 126 29 127 4 (set (pc)
        (label_ref 114)) malloc.c:80 659 {jump}
     (nil)
 -> 114)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 127 126 32)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 72
(code_label 32 127 33 5 16 "" [1 uses])
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (reg:DI 0 ax [72])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 J+0 S8 A64])) malloc.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 128 5 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 I+0 S8 A64])
        (reg:DI 0 ax [72])) malloc.c:81 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(jump_insn 128 35 129 5 (set (pc)
        (label_ref 43)) malloc.c:81 659 {jump}
     (nil)
 -> 43)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 45)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73
(code_label 45 129 38 6 19 "" [1 uses])
(note 38 45 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg:DI 0 ax [73])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 I+0 S8 A64])) malloc.c:82 87 {*movdi_internal_rex64}
     (nil))
(insn 40 39 41 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [73])) malloc.c:82 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(call_insn 41 40 42 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("split_block") [flags 0x3]  <function_decl 0x7f44831d5600 split_block>) [0 split_block S1 A8])
            (const_int 0 [0]))) malloc.c:82 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:DI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 42 41 43 6 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 I+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 I+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:81 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74
(code_label 43 42 44 7 18 "" [1 uses])
(note 44 43 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 44 47 7 (set (reg:DI 0 ax [74])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 I+0 S8 A64])) malloc.c:81 87 {*movdi_internal_rex64}
     (nil))
(insn 47 46 48 7 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [74])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 K+0 S8 A64]))) malloc.c:81 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [74])
        (nil)))
(jump_insn 48 47 49 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) malloc.c:81 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 45)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 63 75 76 77 80 81 82 83 84
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg:DI 0 ax [75])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 K+0 S8 A64])) malloc.c:85 87 {*movdi_internal_rex64}
     (nil))
(insn 51 50 52 8 (set (reg/f:DI 0 ax [76])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [75])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [75])
        (nil)))
(insn 52 51 53 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])
        (reg/f:DI 0 ax [76])) malloc.c:85 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 53 52 56 8 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:87 87 {*movdi_internal_rex64}
     (nil))
(insn 56 53 57 8 (set (reg:QI 1 dx [80])
        (mem/j:QI (reg/f:DI 0 ax [77]) [0 b_12->reserved+0 S1 A64])) malloc.c:87 91 {*movqi_internal}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg:QI 1 dx [81])
                (ior:QI (reg:QI 1 dx [80])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:87 425 {*iorqi_1}
     (expr_list:REG_DEAD (reg:QI 1 dx [80])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 8 (set (mem/j:QI (reg/f:DI 0 ax [77]) [0 b_12->reserved+0 S1 A64])
        (reg:QI 1 dx [81])) malloc.c:87 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 1 dx [81])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
            (nil))))
(insn 59 58 60 8 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 60 59 61 8 (set (reg/f:DI 1 dx [orig:63 D.3326 ] [63])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [82])
                (const_int 8 [0x8])) [0 b_12->succ+0 S8 A64])) malloc.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(insn 61 60 62 8 (set (reg:DI 0 ax [83])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 K+0 S8 A64])) malloc.c:88 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 8 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [83])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])
        (reg/f:DI 1 dx [orig:63 D.3326 ] [63])) malloc.c:88 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:63 D.3326 ] [63])
            (nil))))
(insn 63 62 64 8 (set (reg/f:DI 0 ax [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:89 87 {*movdi_internal_rex64}
     (nil))
(insn 64 63 130 8 (parallel [
            (set (reg/f:DI 0 ax [orig:59 D.3324 ] [59])
                (plus:DI (reg/f:DI 0 ax [84])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:89 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [84])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(jump_insn 130 64 131 8 (set (pc)
        (label_ref 114)) malloc.c:89 659 {jump}
     (nil)
 -> 114)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 131 130 67)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66
(code_label 67 131 68 9 15 "" [1 uses])
(note 68 67 69 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f44832227b8 *.LC1>)) malloc.c:92 87 {*movdi_internal_rex64}
     (nil))
(call_insn 70 69 71 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f4483420300 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) malloc.c:92 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 9 (set (reg:DI 5 di)
        (const_int 16777216 [0x1000000])) malloc.c:94 87 {*movdi_internal_rex64}
     (nil))
(call_insn 72 71 73 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sbrk") [flags 0x41]  <function_decl 0x7f4483569a00 sbrk>) [0 sbrk S1 A8])
            (const_int 0 [0]))) malloc.c:94 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 73 72 74 9 (set (reg/f:DI 0 ax [orig:64 base_addr.6 ] [64])
        (reg:DI 0 ax)) malloc.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 74 73 75 9 (set (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])
        (reg/f:DI 0 ax [orig:64 base_addr.6 ] [64])) malloc.c:94 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:64 base_addr.6 ] [64])
        (nil)))
(insn 75 74 76 9 (set (reg/f:DI 0 ax [orig:65 base_addr.7 ] [65])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 76 75 77 9 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:65 base_addr.7 ] [65])) malloc.c:96 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 base_addr.7 ] [65])
        (nil)))
(insn 77 76 78 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f4483222850 *.LC2>)) malloc.c:96 87 {*movdi_internal_rex64}
     (nil))
(insn 78 77 79 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) malloc.c:96 91 {*movqi_internal}
     (nil))
(call_insn 79 78 80 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f448341ec00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) malloc.c:96 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (nil)))))
(insn 80 79 81 9 (set (reg:SI 4 si)
        (const_int 16777216 [0x1000000])) malloc.c:97 89 {*movsi_internal}
     (nil))
(insn 81 80 82 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f44832228e8 *.LC3>)) malloc.c:97 87 {*movdi_internal_rex64}
     (nil))
(insn 82 81 83 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) malloc.c:97 91 {*movqi_internal}
     (nil))
(call_insn 83 82 84 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f448341ec00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) malloc.c:97 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (nil)))))
(insn 84 83 85 9 (set (reg/f:DI 0 ax [orig:66 base_addr.8 ] [66])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:99 87 {*movdi_internal_rex64}
     (nil))
(insn 85 84 86 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:66 base_addr.8 ] [66])
            (const_int 0 [0]))) malloc.c:99 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 base_addr.8 ] [66])
        (nil)))
(jump_insn 86 85 87 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) malloc.c:99 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 91)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 87 86 88 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 132 10 (set (reg/f:DI 0 ax [orig:59 D.3324 ] [59])
        (const_int 0 [0])) malloc.c:99 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 132 88 133 10 (set (pc)
        (label_ref 114)) malloc.c:99 659 {jump}
     (nil)
 -> 114)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 133 132 91)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 85 86 87 88 89 92 93 94 95 96
(code_label 91 133 92 11 20 "" [1 uses])
(note 92 91 93 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 11 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (symbol_ref:DI ("base_addr") [flags 0x2]  <var_decl 0x7f448319eb48 base_addr>) [0 base_addr+0 S8 A64])) malloc.c:101 87 {*movdi_internal_rex64}
     (nil))
(insn 94 93 95 11 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])
        (reg/f:DI 0 ax [85])) malloc.c:101 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (nil)))
(insn 95 94 96 11 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:102 87 {*movdi_internal_rex64}
     (nil))
(insn 96 95 97 11 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [86])
                (const_int 1 [0x1])) [0 b_19->kval+0 S1 A8])
        (const_int 24 [0x18])) malloc.c:102 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [86])
        (nil)))
(insn 97 96 98 11 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:103 87 {*movdi_internal_rex64}
     (nil))
(insn 98 97 99 11 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 8 [0x8])) [0 b_19->succ+0 S8 A64])
        (const_int 0 [0])) malloc.c:103 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [87])
        (nil)))
(insn 99 98 100 11 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:104 87 {*movdi_internal_rex64}
     (nil))
(insn 100 99 101 11 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 16 [0x10])) [0 b_19->pred+0 S8 A64])
        (const_int 0 [0])) malloc.c:104 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [88])
        (nil)))
(insn 101 100 104 11 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:105 87 {*movdi_internal_rex64}
     (nil))
(insn 104 101 105 11 (set (reg:QI 1 dx [92])
        (mem/j:QI (reg/f:DI 0 ax [89]) [0 b_19->reserved+0 S1 A64])) malloc.c:105 91 {*movqi_internal}
     (nil))
(insn 105 104 106 11 (parallel [
            (set (reg:QI 1 dx [93])
                (and:QI (reg:QI 1 dx [92])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:105 405 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 1 dx [92])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 106 105 107 11 (set (mem/j:QI (reg/f:DI 0 ax [89]) [0 b_19->reserved+0 S1 A64])
        (reg:QI 1 dx [93])) malloc.c:105 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 1 dx [93])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [89])
            (nil))))
(insn 107 106 108 11 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 b+0 S8 A64])) malloc.c:106 87 {*movdi_internal_rex64}
     (nil))
(insn 108 107 109 11 (set (mem/f/j:DI (const:DI (plus:DI (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)
                    (const_int 192 [0xc0]))) [0 free_list+192 S8 A256])
        (reg/f:DI 0 ax [94])) malloc.c:106 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(insn 109 108 110 11 (set (reg:DI 0 ax [95])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 size+0 S8 A64])) malloc.c:107 87 {*movdi_internal_rex64}
     (nil))
(insn 110 109 111 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) malloc.c:107 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [95])
        (nil)))
(call_insn 111 110 112 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) malloc.c:107 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 112 111 113 11 (set (reg/f:DI 0 ax [96])
        (reg:DI 0 ax)) malloc.c:107 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [96])
            (nil))))
(insn 113 112 114 11 (set (reg/f:DI 0 ax [orig:59 D.3324 ] [59])
        (reg/f:DI 0 ax [96])) malloc.c:107 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              4 [100.0%] 
;;              8 [100.0%] 
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 67
(code_label 114 113 115 12 17 "" [3 uses])
(note 115 114 116 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 120 12 (set (reg:DI 0 ax [orig:67 <retval> ] [67])
        (reg/f:DI 0 ax [orig:59 D.3324 ] [59])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.3324 ] [59])
        (nil)))
(insn 120 116 123 12 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:67 <retval> ] [67])) malloc.c:109 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:67 <retval> ] [67])
        (nil)))
(insn 123 120 0 12 (use (reg/i:DI 0 ax)) malloc.c:109 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function push_block (push_block, funcdef_no=5, decl_uid=3140, cgraph_uid=5)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) m  (1) re {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
starting the processing of deferred insns
ending the processing of deferred insns


push_block

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={26d,25u} r1={5d,4u} r2={1d} r4={1d} r5={1d,1u} r6={1d,14u} r7={1d,4u} r17={1d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 98{48d,50u,0e} in 36{36 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 74 75
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])
        (reg:DI 5 di [ current ])) malloc.c:111 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ current ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:112 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax [orig:59 D.3331 ] [59])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [74])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:112 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 0 ax [orig:60 D.3332 ] [60])
        (zero_extend:SI (reg:QI 0 ax [orig:59 D.3331 ] [59]))) malloc.c:112 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:59 D.3331 ] [59])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 0 ax [75])
        (sign_extend:DI (reg:SI 0 ax [orig:60 D.3332 ] [60]))) malloc.c:112 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.3332 ] [60])
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:61 D.3333 ] [61])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [75])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:112 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [75])
        (nil)))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:61 D.3333 ] [61])
            (const_int 0 [0]))) malloc.c:112 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.3333 ] [61])
        (nil)))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) malloc.c:112 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 36)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 62 63 64 65 66 67 68 69 70 71 76 77 78 79 80 81 82 83 84
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:113 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (set (reg:QI 0 ax [orig:62 D.3331 ] [62])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [76])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:113 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 16 15 17 3 (set (reg:SI 0 ax [orig:63 D.3332 ] [63])
        (zero_extend:SI (reg:QI 0 ax [orig:62 D.3331 ] [62]))) malloc.c:113 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:62 D.3331 ] [62])
        (nil)))
(insn 17 16 18 3 (set (reg:DI 0 ax [77])
        (sign_extend:DI (reg:SI 0 ax [orig:63 D.3332 ] [63]))) malloc.c:113 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.3332 ] [63])
        (nil)))
(insn 18 17 19 3 (set (reg/f:DI 1 dx [orig:64 D.3333 ] [64])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [77])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:113 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 3 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [78])
                (const_int 8 [0x8])) [0 current_1(D)->succ+0 S8 A64])
        (reg/f:DI 1 dx [orig:64 D.3333 ] [64])) malloc.c:113 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:64 D.3333 ] [64])
            (nil))))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:114 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 3 (set (reg:QI 0 ax [orig:65 D.3331 ] [65])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [79])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:114 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (nil)))
(insn 23 22 24 3 (set (reg:SI 0 ax [orig:66 D.3332 ] [66])
        (zero_extend:SI (reg:QI 0 ax [orig:65 D.3331 ] [65]))) malloc.c:114 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:65 D.3331 ] [65])
        (nil)))
(insn 24 23 25 3 (set (reg:DI 0 ax [80])
        (sign_extend:DI (reg:SI 0 ax [orig:66 D.3332 ] [66]))) malloc.c:114 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:66 D.3332 ] [66])
        (nil)))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [orig:67 D.3333 ] [67])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [80])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [80])
        (nil)))
(insn 26 25 27 3 (set (reg/f:DI 1 dx [orig:68 D.3333 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:67 D.3333 ] [67])
                (const_int 16 [0x10])) [0 _10->pred+0 S8 A64])) malloc.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:67 D.3333 ] [67])
        (nil)))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:114 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 3 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [81])
                (const_int 16 [0x10])) [0 current_1(D)->pred+0 S8 A64])
        (reg/f:DI 1 dx [orig:68 D.3333 ] [68])) malloc.c:114 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:68 D.3333 ] [68])
            (nil))))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 30 29 31 3 (set (reg:QI 0 ax [orig:69 D.3331 ] [69])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [82])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:115 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(insn 31 30 32 3 (set (reg:SI 0 ax [orig:70 D.3332 ] [70])
        (zero_extend:SI (reg:QI 0 ax [orig:69 D.3331 ] [69]))) malloc.c:115 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:69 D.3331 ] [69])
        (nil)))
(insn 32 31 33 3 (set (reg:DI 0 ax [83])
        (sign_extend:DI (reg:SI 0 ax [orig:70 D.3332 ] [70]))) malloc.c:115 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.3332 ] [70])
        (nil)))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [orig:71 D.3333 ] [71])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [83])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:115 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [83])
        (nil)))
(insn 34 33 35 3 (set (reg/f:DI 1 dx [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:115 87 {*movdi_internal_rex64}
     (nil))
(insn 35 34 36 3 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:71 D.3333 ] [71])
                (const_int 16 [0x10])) [0 _14->pred+0 S8 A64])
        (reg/f:DI 1 dx [84])) malloc.c:115 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [84])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:71 D.3333 ] [71])
            (nil))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 72 73 85 86 87
(code_label 36 35 37 4 22 "" [1 uses])
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:117 87 {*movdi_internal_rex64}
     (nil))
(insn 39 38 40 4 (set (reg:QI 0 ax [orig:72 D.3331 ] [72])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [85])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:117 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [85])
        (nil)))
(insn 40 39 41 4 (set (reg:SI 0 ax [orig:73 D.3332 ] [73])
        (zero_extend:SI (reg:QI 0 ax [orig:72 D.3331 ] [72]))) malloc.c:117 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:72 D.3331 ] [72])
        (nil)))
(insn 41 40 42 4 (set (reg:DI 0 ax [86])
        (sign_extend:DI (reg:SI 0 ax [orig:73 D.3332 ] [73]))) malloc.c:117 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:73 D.3332 ] [73])
        (nil)))
(insn 42 41 43 4 (set (reg/f:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:117 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 0 4 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [86])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])
        (reg/f:DI 1 dx [87])) malloc.c:117 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [87])
        (expr_list:REG_DEAD (reg:DI 0 ax [86])
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function free_link (free_link, funcdef_no=6, decl_uid=3143, cgraph_uid=6)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*cmpdi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) r {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) m  (1) re {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 32
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
starting the processing of deferred insns
ending the processing of deferred insns


free_link

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={18d,17u} r1={6d,5u} r2={2d,1u} r4={1d} r5={1d,1u} r6={1d,19u} r7={1d,8u} r17={3d,3u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 99{44d,55u,0e} in 33{33 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 71 72
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])
        (reg:DI 5 di [ current ])) malloc.c:121 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ current ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:122 87 {*movdi_internal_rex64}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax [orig:59 D.3334 ] [59])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [71])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:122 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [71])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 0 ax [orig:60 D.3335 ] [60])
        (zero_extend:SI (reg:QI 0 ax [orig:59 D.3334 ] [59]))) malloc.c:122 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:59 D.3334 ] [59])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 0 ax [72])
        (sign_extend:DI (reg:SI 0 ax [orig:60 D.3335 ] [60]))) malloc.c:122 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 D.3335 ] [60])
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:61 D.3336 ] [61])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [72])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])) malloc.c:122 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:61 D.3336 ] [61])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64]))) malloc.c:122 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:61 D.3336 ] [61])
        (nil)))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) malloc.c:122 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 62 63 64 73 74 75
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [73])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:123 87 {*movdi_internal_rex64}
     (nil))
(insn 15 14 16 3 (set (reg:QI 0 ax [orig:62 D.3334 ] [62])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [73])
                (const_int 1 [0x1])) [0 current_1(D)->kval+0 S1 A8])) malloc.c:123 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [73])
        (nil)))
(insn 16 15 17 3 (set (reg:SI 2 cx [orig:63 D.3335 ] [63])
        (zero_extend:SI (reg:QI 0 ax [orig:62 D.3334 ] [62]))) malloc.c:123 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:62 D.3334 ] [62])
        (nil)))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:123 87 {*movdi_internal_rex64}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 1 dx [orig:64 D.3336 ] [64])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [74])
                (const_int 8 [0x8])) [0 current_1(D)->succ+0 S8 A64])) malloc.c:123 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (nil)))
(insn 19 18 20 3 (set (reg:DI 0 ax [75])
        (sign_extend:DI (reg:SI 2 cx [orig:63 D.3335 ] [63]))) malloc.c:123 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:63 D.3335 ] [63])
        (nil)))
(insn 20 19 21 3 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [75])
                    (const_int 8 [0x8]))
                (symbol_ref:DI ("free_list") [flags 0x2]  <var_decl 0x7f448319eab0 free_list>)) [0 free_list S8 A64])
        (reg/f:DI 1 dx [orig:64 D.3336 ] [64])) malloc.c:123 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [75])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:64 D.3336 ] [64])
            (nil))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 76
(code_label 21 20 22 4 24 "" [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:DI 0 ax [76])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:125 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [orig:65 D.3336 ] [65])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [76])
                (const_int 8 [0x8])) [0 current_1(D)->succ+0 S8 A64])) malloc.c:125 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [76])
        (nil)))
(insn 25 24 26 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:65 D.3336 ] [65])
            (const_int 0 [0]))) malloc.c:125 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:65 D.3336 ] [65])
        (nil)))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) malloc.c:125 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 33)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 66 67 77 78
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 0 ax [77])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 0 ax [orig:66 D.3336 ] [66])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [77])
                (const_int 8 [0x8])) [0 current_1(D)->succ+0 S8 A64])) malloc.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [77])
        (nil)))
(insn 30 29 31 5 (set (reg/f:DI 1 dx [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:126 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 5 (set (reg/f:DI 1 dx [orig:67 D.3336 ] [67])
        (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [78])
                (const_int 16 [0x10])) [0 current_1(D)->pred+0 S8 A64])) malloc.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [78])
        (nil)))
(insn 32 31 33 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:66 D.3336 ] [66])
                (const_int 16 [0x10])) [0 _9->pred+0 S8 A64])
        (reg/f:DI 1 dx [orig:67 D.3336 ] [67])) malloc.c:126 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:67 D.3336 ] [67])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:66 D.3336 ] [66])
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 68 79
(code_label 33 32 34 6 25 "" [1 uses])
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:128 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 6 (set (reg/f:DI 0 ax [orig:68 D.3336 ] [68])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [79])
                (const_int 16 [0x10])) [0 current_1(D)->pred+0 S8 A64])) malloc.c:128 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (nil)))
(insn 37 36 38 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:68 D.3336 ] [68])
            (const_int 0 [0]))) malloc.c:128 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:68 D.3336 ] [68])
        (nil)))
(jump_insn 38 37 39 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 47)
            (pc))) malloc.c:128 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 47)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 69 70 80 81
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 41 40 42 7 (set (reg/f:DI 0 ax [orig:69 D.3336 ] [69])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [80])
                (const_int 16 [0x10])) [0 current_1(D)->pred+0 S8 A64])) malloc.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (nil)))
(insn 42 41 43 7 (set (reg/f:DI 1 dx [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])) malloc.c:129 87 {*movdi_internal_rex64}
     (nil))
(insn 43 42 44 7 (set (reg/f:DI 1 dx [orig:70 D.3336 ] [70])
        (mem/f/j:DI (plus:DI (reg/f:DI 1 dx [81])
                (const_int 8 [0x8])) [0 current_1(D)->succ+0 S8 A64])) malloc.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [81])
        (nil)))
(insn 44 43 47 7 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [orig:69 D.3336 ] [69])
                (const_int 8 [0x8])) [0 _12->succ+0 S8 A64])
        (reg/f:DI 1 dx [orig:70 D.3336 ] [70])) malloc.c:129 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:70 D.3336 ] [70])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:69 D.3336 ] [69])
            (nil))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 47 44 48 8 23 "" [1 uses])
(note 48 47 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function merge (merge, funcdef_no=7, decl_uid=3147, cgraph_uid=7)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


merge

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 27{18d,9u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 current+0 S8 A64])
        (reg:DI 5 di [ current ])) malloc.c:133 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ current ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 buddy+0 S8 A64])
        (reg:DI 4 si [ buddy ])) malloc.c:133 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ buddy ])
        (nil)))
(note 4 3 0 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function free (<unset-asm-name>, funcdef_no=8, decl_uid=916, cgraph_uid=8)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) qm  (1) qn {*cmpqi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) qm {zero_extendqidi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 41:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=15,losers=1 -- reject
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 42:  (0) m  (1) qn {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 0 in insn 45:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) q {*cmpqi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) q  (1) qm {*movqi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) qm  (1) qn {*cmpqi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) rm {*cmpdi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) rzw {*call}
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 53
changing reg in insn 52
changing reg in insn 53
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 63
changing reg in insn 69
changing reg in insn 71
changing reg in insn 70
changing reg in insn 72
changing reg in insn 80
changing reg in insn 81
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 82.


free

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={24d,21u} r1={11d,6u} r2={5d} r4={8d,3u} r5={9d,5u} r6={1d,31u} r7={1d,16u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={12d,5u} r18={4d} r19={4d} r20={1d,1u,1e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 323{234d,88u,1e} in 54{50 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 ptr+0 S8 A64])
        (reg:DI 5 di [ ptr ])) malloc.c:145 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ ptr ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 ptr+0 S8 A64])
            (const_int 0 [0]))) malloc.c:148 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) malloc.c:148 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 11)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 8 7 87 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 87 8 88 3 (set (pc)
        (label_ref 85)) malloc.c:149 659 {jump}
     (nil)
 -> 85)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 88 87 11)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 68 69 70
(code_label 11 88 12 4 29 "" [1 uses])
(note 12 11 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 12 17 4 (set (reg/f:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 ptr+0 S8 A64])) malloc.c:151 87 {*movdi_internal_rex64}
     (nil))
(insn 17 16 18 4 (parallel [
            (set (reg:DI 0 ax [68])
                (plus:DI (reg/f:DI 0 ax [69])
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:151 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [69])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 ptr+0 S8 A64])
                    (const_int -24 [0xffffffffffffffe8]))
                (nil)))))
(insn 18 17 19 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])
        (reg:DI 0 ax [68])) malloc.c:151 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [68])
        (nil)))
(insn 19 18 20 4 (set (reg/f:DI 0 ax [70])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:153 87 {*movdi_internal_rex64}
     (nil))
(insn 20 19 21 4 (set (reg:QI 0 ax [orig:59 D.3337 ] [59])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [70])
                (const_int 1 [0x1])) [0 current_2->kval+0 S1 A8])) malloc.c:153 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [70])
        (nil)))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:59 D.3337 ] [59])
            (const_int 24 [0x18]))) malloc.c:153 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:59 D.3337 ] [59])
        (nil)))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) malloc.c:153 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 26)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 23 22 89 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 89 23 90 5 (set (pc)
        (label_ref 85)) malloc.c:154 659 {jump}
     (nil)
 -> 85)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 90 89 26)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 71 72 73 74 77 78 79
(code_label 26 90 27 6 31 "" [1 uses])
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg/f:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:156 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 6 (set (reg:QI 0 ax [orig:60 D.3337 ] [60])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [71])
                (const_int 1 [0x1])) [0 current_2->kval+0 S1 A8])) malloc.c:156 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [71])
        (nil)))
(insn 30 29 31 6 (set (reg:DI 1 dx [orig:61 D.3338 ] [61])
        (zero_extend:DI (reg:QI 0 ax [orig:60 D.3337 ] [60]))) malloc.c:156 141 {zero_extendqidi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:60 D.3337 ] [60])
        (nil)))
(insn 31 30 32 6 (set (reg:DI 0 ax [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:156 87 {*movdi_internal_rex64}
     (nil))
(insn 32 31 33 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [orig:61 D.3338 ] [61])) malloc.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.3338 ] [61])
        (nil)))
(insn 33 32 34 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [72])) malloc.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(call_insn 34 33 35 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("get_buddy") [flags 0x3]  <function_decl 0x7f44831d5500 get_buddy>) [0 get_buddy S1 A8])
            (const_int 0 [0]))) malloc.c:156 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 35 34 36 6 (set (reg:DI 0 ax [73])
        (reg:DI 0 ax)) malloc.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 36 35 37 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 buddy+0 S8 A64])
        (reg:DI 0 ax [73])) malloc.c:156 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(insn 37 36 40 6 (set (reg/f:DI 0 ax [74])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:157 87 {*movdi_internal_rex64}
     (nil))
(insn 40 37 41 6 (set (reg:QI 1 dx [77])
        (mem/j:QI (reg/f:DI 0 ax [74]) [0 current_2->reserved+0 S1 A64])) malloc.c:157 91 {*movqi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:QI 1 dx [78])
                (and:QI (reg:QI 1 dx [77])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:157 405 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 1 dx [77])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 42 41 43 6 (set (mem/j:QI (reg/f:DI 0 ax [74]) [0 current_2->reserved+0 S1 A64])
        (reg:QI 1 dx [78])) malloc.c:157 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 1 dx [78])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
            (nil))))
(insn 43 42 44 6 (set (reg/f:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 buddy+0 S8 A64])) malloc.c:158 87 {*movdi_internal_rex64}
     (nil))
(insn 44 43 45 6 (set (reg:QI 0 ax [orig:62 D.3337 ] [62])
        (mem:QI (reg/f:DI 0 ax [79]) [0 *buddy_6+0 S1 A64])) malloc.c:158 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [79])
        (nil)))
(insn 45 44 46 6 (parallel [
            (set (reg:QI 0 ax [orig:63 D.3337 ] [63])
                (and:QI (reg:QI 0 ax [orig:62 D.3337 ] [62])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:158 405 {*andqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:62 D.3337 ] [62])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 46 45 47 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:63 D.3337 ] [63])
            (const_int 0 [0]))) malloc.c:158 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:63 D.3337 ] [63])
        (nil)))
(jump_insn 47 46 48 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) malloc.c:158 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       7 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 80 81
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 7 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 buddy+0 S8 A64])) malloc.c:158 87 {*movdi_internal_rex64}
     (nil))
(insn 50 49 51 7 (set (reg:QI 1 dx [orig:64 D.3337 ] [64])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [80])
                (const_int 1 [0x1])) [0 buddy_6->kval+0 S1 A8])) malloc.c:158 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (nil)))
(insn 51 50 52 7 (set (reg/f:DI 0 ax [81])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:158 87 {*movdi_internal_rex64}
     (nil))
(insn 52 51 53 7 (set (reg:QI 0 ax [orig:65 D.3337 ] [65])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [81])
                (const_int 1 [0x1])) [0 current_2->kval+0 S1 A8])) malloc.c:158 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [81])
        (nil)))
(insn 53 52 54 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:64 D.3337 ] [64])
            (reg:QI 0 ax [orig:65 D.3337 ] [65]))) malloc.c:158 5 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:65 D.3337 ] [65])
        (expr_list:REG_DEAD (reg:QI 1 dx [orig:64 D.3337 ] [64])
            (nil))))
(jump_insn 54 53 55 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) malloc.c:158 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 82
(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 8 (set (reg/f:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:159 87 {*movdi_internal_rex64}
     (nil))
(insn 57 56 58 8 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 0 ax [82])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 buddy+0 S8 A64]))) malloc.c:159 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [82])
        (nil)))
(jump_insn 58 57 59 8 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) malloc.c:159 621 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 67)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 83 84
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg:DI 1 dx [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 buddy+0 S8 A64])) malloc.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 61 60 62 9 (set (reg:DI 0 ax [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:160 87 {*movdi_internal_rex64}
     (nil))
(insn 62 61 63 9 (set (reg:DI 4 si)
        (reg:DI 1 dx [83])) malloc.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [83])
        (nil)))
(insn 63 62 64 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [84])) malloc.c:160 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [84])
        (nil)))
(call_insn 64 63 91 9 (call (mem:QI (symbol_ref:DI ("merge") [flags 0x3]  <function_decl 0x7f44831d5c00 merge>) [0 merge S1 A8])
        (const_int 0 [0])) malloc.c:160 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(jump_insn 91 64 92 9 (set (pc)
        (label_ref 85)) malloc.c:159 659 {jump}
     (nil)
 -> 85)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 92 91 67)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 85 86
(code_label 67 92 68 10 33 "" [1 uses])
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (reg:DI 1 dx [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:162 87 {*movdi_internal_rex64}
     (nil))
(insn 70 69 71 10 (set (reg:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 buddy+0 S8 A64])) malloc.c:162 87 {*movdi_internal_rex64}
     (nil))
(insn 71 70 72 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [85])) malloc.c:162 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [85])
        (nil)))
(insn 72 71 73 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) malloc.c:162 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [86])
        (nil)))
(call_insn 73 72 93 10 (call (mem:QI (symbol_ref:DI ("merge") [flags 0x3]  <function_decl 0x7f44831d5c00 merge>) [0 merge S1 A8])
        (const_int 0 [0])) malloc.c:162 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(jump_insn 93 73 94 10 (set (pc)
        (label_ref 85)) malloc.c:159 659 {jump}
     (nil)
 -> 85)
;;  succ:       12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 78)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 87
(code_label 78 94 79 11 32 "" [2 uses])
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 11 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 current+0 S8 A64])) malloc.c:165 87 {*movdi_internal_rex64}
     (nil))
(insn 81 80 82 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) malloc.c:165 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(call_insn 82 81 85 11 (call (mem:QI (symbol_ref:DI ("push_block") [flags 0x3]  <function_decl 0x7f44831d5a00 push_block>) [0 push_block S1 A8])
        (const_int 0 [0])) malloc.c:165 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              9 [100.0%] 
;;              3 [100.0%] 
;;              5 [100.0%] 
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 85 82 86 12 28 "" [4 uses])
(note 86 85 0 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function calloc (<unset-asm-name>, funcdef_no=9, decl_uid=863, cgraph_uid=9)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 2 in insn 8:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=2,overall=11,losers=1 -- reject
	 Choosing alt 2 in insn 22:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=68 from oldreg=61, assigning class GENERAL_REGS to r68
   22: {r68:DI=r68:DI*[frame:DI-0x20];clobber flags:CC;}
      REG_DEAD r65:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   43: r68:DI=r65:DI
    Inserting insn reload after:
   44: r61:DI=r68:DI

          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 38: point = 0
   Insn 35: point = 0
   Insn 31: point = 1
  BB 3
   Insn 41: point = 4
   Insn 16: point = 4
  BB 4
   Insn 28: point = 5
   Insn 27: point = 6
   Insn 26: point = 6
   Insn 25: point = 7
   Insn 24: point = 7
   Insn 23: point = 8
   Insn 44: point = 9
	Hard reg 1 is preferable by r68 with profit 1
   Insn 22: point = 11
   Insn 43: point = 11
	Hard reg 1 is preferable by r68 with profit 1
	Hard reg 0 is preferable by r68 with profit 1
   Insn 21: point = 13
  BB 2
   Insn 14: point = 14
   Insn 13: point = 14
   Insn 12: point = 14
   Insn 11: point = 15
   Insn 10: point = 16
   Insn 9: point = 16
   Insn 8: point = 17
   Insn 7: point = 19
   Insn 3: point = 20
   Insn 2: point = 20
 r59: [2..5]
 r60: [16..17]
 r61: [7..9]
 r62: [0..1]
 r63: [18..19]
 r64: [14..15]
 r65: [12..13]
 r66: [6..8]
 r68: [10..11]
Compressing live ranges: from 20 to 16 - 80%
Ranges after the compression:
 r59: [2..3]
 r60: [12..13]
 r61: [4..5]
 r62: [0..1]
 r63: [14..15]
 r64: [10..11]
 r65: [8..9]
 r66: [4..5]
 r68: [6..7]
	 Assigning to 68 (cl=GENERAL_REGS, orig=61, freq=3, tfirst=68, tfreq=3)...
	   Assign 0 to reload r68 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 28
changing reg in insn 16
changing reg in insn 31
changing reg in insn 8
changing reg in insn 9
changing reg in insn 24
changing reg in insn 31
changing reg in insn 35
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
starting the processing of deferred insns
ending the processing of deferred insns


calloc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={14d,12u} r1={5d,2u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,15u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 168{125d,43u,0e} in 25{23 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 63 64
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 number+0 S8 A64])
        (reg:DI 5 di [ number ])) malloc.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ number ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])
        (reg:DI 4 si [ size ])) malloc.c:170 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ size ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [63])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 number+0 S8 A64])) malloc.c:172 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 0 ax [orig:60 D.3340 ] [60])
                (mult:DI (reg:DI 0 ax [63])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:172 354 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [63])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:60 D.3340 ] [60])) malloc.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:60 D.3340 ] [60])
        (nil)))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) malloc.c:172 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [64])
        (reg:DI 0 ax)) malloc.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [64])
            (nil))))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 new+0 S8 A64])
        (reg/f:DI 0 ax [64])) malloc.c:172 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [64])
        (nil)))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 new+0 S8 A64])
            (const_int 0 [0]))) malloc.c:173 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) malloc.c:173 621 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 41 3 (set (reg/f:DI 0 ax [orig:59 D.3339 ] [59])
        (const_int 0 [0])) malloc.c:173 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 41 16 42 3 (set (pc)
        (label_ref 29)) malloc.c:173 659 {jump}
     (nil)
 -> 29)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 42 41 19)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 61 65 66
(code_label 19 42 20 4 36 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 43 4 (set (reg:DI 0 ax [65])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 number+0 S8 A64])) malloc.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 43 21 22 4 (set (reg:DI 0 ax [orig:61 D.3340 ] [61])
        (reg:DI 0 ax [65])) malloc.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [65])
        (nil)))
(insn 22 43 44 4 (parallel [
            (set (reg:DI 0 ax [orig:61 D.3340 ] [61])
                (mult:DI (reg:DI 0 ax [orig:61 D.3340 ] [61])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:174 354 {*muldi3_1}
     (nil))
(insn 44 22 23 4 (set (reg:DI 1 dx [orig:61 D.3340 ] [61])
        (reg:DI 0 ax [orig:61 D.3340 ] [61])) malloc.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:61 D.3340 ] [61])
        (nil)))
(insn 23 44 24 4 (set (reg:DI 0 ax [66])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 new+0 S8 A64])) malloc.c:174 87 {*movdi_internal_rex64}
     (nil))
(insn 24 23 25 4 (set (reg:DI 1 dx)
        (reg:DI 1 dx [orig:61 D.3340 ] [61])) malloc.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:61 D.3340 ] [61])
        (nil)))
(insn 25 24 26 4 (set (reg:SI 4 si)
        (const_int 0 [0])) malloc.c:174 89 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [66])) malloc.c:174 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [66])
        (nil)))
(call_insn 27 26 28 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f4483412c00 memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) malloc.c:174 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_BR_PRED (use (reg:SI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [orig:59 D.3339 ] [59])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 new+0 S8 A64])) malloc.c:175 87 {*movdi_internal_rex64}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 62
(code_label 29 28 30 5 37 "" [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 35 5 (set (reg:DI 0 ax [orig:62 <retval> ] [62])
        (reg/f:DI 0 ax [orig:59 D.3339 ] [59])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.3339 ] [59])
        (nil)))
(insn 35 31 38 5 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:62 <retval> ] [62])) malloc.c:176 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:62 <retval> ] [62])
        (nil)))
(insn 38 35 0 5 (use (reg/i:DI 0 ax)) malloc.c:176 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function realloc (<unset-asm-name>, funcdef_no=10, decl_uid=987, cgraph_uid=10)


********** Local #1: **********

          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 2:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 3:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) ?mr {*cmpdi_ccno_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 40:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=90 from oldreg=62, assigning class GENERAL_REGS to r90
      Creating newreg=91, assigning class CREG to r91
   40: {r90:SI=r90:SI<<r91:QI;clobber flags:CC;}
      REG_DEAD r81:SI
      REG_DEAD r61:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  103: r90:SI=r81:SI
  105: r91:QI=r61:SI#0
    Inserting insn reload after:
  104: r62:SI=r90:SI

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) rmWz {*zero_extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rm {*cmpdi_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 66:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
          alt=0,overall=11,losers=1 -- reject
          alt=1,overall=11,losers=1 -- reject
          alt=2,overall=9,losers=1 -- reject
          alt=3,overall=9,losers=1 -- reject
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=92 from oldreg=70, assigning class GENERAL_REGS to r92
      Creating newreg=93, assigning class CREG to r93
   71: {r92:SI=r92:SI<<r93:QI;clobber flags:CC;}
      REG_DEAD r85:SI
      REG_DEAD r69:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  106: r92:SI=r85:SI
  108: r93:QI=r69:SI#0
    Inserting insn reload after:
  107: r70:SI=r92:SI

          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=14,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rzw {*call_value}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rem {*movdi_internal_rex64}

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 92: point = 0
   Insn 89: point = 0
   Insn 85: point = 1
  BB 9
   Insn 101: point = 4
   Insn 60: point = 4
  BB 7
   Insn 99: point = 5
   Insn 47: point = 5
  BB 5
   Insn 97: point = 6
   Insn 31: point = 6
   Insn 30: point = 7
   Insn 29: point = 7
   Insn 28: point = 8
  BB 3
   Insn 95: point = 9
   Insn 14: point = 9
   Insn 13: point = 11
   Insn 12: point = 12
   Insn 11: point = 12
   Insn 10: point = 13
  BB 10
   Insn 82: point = 14
   Insn 81: point = 15
   Insn 80: point = 15
   Insn 79: point = 16
   Insn 78: point = 17
   Insn 77: point = 17
   Insn 76: point = 18
   Insn 75: point = 19
   Insn 74: point = 20
   Insn 73: point = 21
   Insn 72: point = 22
   Insn 107: point = 24
	Hard reg 0 is preferable by r92 with profit 1
   Insn 71: point = 26
   Insn 108: point = 27
   Insn 106: point = 29
	Hard reg 0 is preferable by r92 with profit 1
	Hard reg 1 is preferable by r92 with profit 1
   Insn 70: point = 31
   Insn 69: point = 32
   Insn 68: point = 34
   Insn 67: point = 36
   Insn 66: point = 38
   Insn 65: point = 40
  BB 8
   Insn 58: point = 41
   Insn 57: point = 41
   Insn 56: point = 41
   Insn 55: point = 42
   Insn 54: point = 43
   Insn 53: point = 43
   Insn 52: point = 44
  BB 6
   Insn 45: point = 45
   Insn 44: point = 45
   Insn 43: point = 46
   Insn 42: point = 48
   Insn 41: point = 50
   Insn 104: point = 52
	Hard reg 0 is preferable by r90 with profit 1
   Insn 40: point = 54
   Insn 105: point = 55
   Insn 103: point = 57
	Hard reg 0 is preferable by r90 with profit 1
	Hard reg 1 is preferable by r90 with profit 1
   Insn 39: point = 59
   Insn 38: point = 60
   Insn 37: point = 62
   Insn 36: point = 64
  BB 4
   Insn 26: point = 65
   Insn 25: point = 65
   Insn 24: point = 65
   Insn 23: point = 66
   Insn 22: point = 68
  BB 2
   Insn 8: point = 69
   Insn 7: point = 69
   Insn 3: point = 69
   Insn 2: point = 69
 r59: [14..14] [9..9] [2..6]
 r60: [61..62]
 r61: [56..60]
 r62: [51..52]
 r63: [49..50]
 r64: [47..48]
 r65: [45..46]
 r66: [37..38]
 r67: [35..36]
 r68: [33..34]
 r69: [28..32]
 r70: [23..24]
 r71: [19..22]
 r72: [0..1]
 r73: [12..13]
 r74: [10..11]
 r77: [65..66]
 r78: [67..68]
 r79: [7..8]
 r80: [63..64]
 r81: [58..59]
 r82: [43..44]
 r83: [41..42]
 r84: [39..40]
 r85: [30..31]
 r86: [18..21]
 r87: [17..20]
 r88: [15..16]
 r90: [53..57]
 r91: [54..55]
 r92: [25..29]
 r93: [26..27]
Compressing live ranges: from 69 to 58 - 84%
Ranges after the compression:
 r59: [11..11] [6..6] [2..3]
 r60: [50..51]
 r61: [46..49]
 r62: [42..43]
 r63: [40..41]
 r64: [38..39]
 r65: [36..37]
 r66: [28..29]
 r67: [26..27]
 r68: [24..25]
 r69: [20..23]
 r70: [16..17]
 r71: [14..15]
 r72: [0..1]
 r73: [9..10]
 r74: [7..8]
 r77: [54..55]
 r78: [56..57]
 r79: [4..5]
 r80: [52..53]
 r81: [48..49]
 r82: [34..35]
 r83: [32..33]
 r84: [30..31]
 r85: [22..23]
 r86: [14..15]
 r87: [14..15]
 r88: [12..13]
 r90: [44..47]
 r91: [44..45]
 r92: [18..21]
 r93: [18..19]
	 Assigning to 91 (cl=CREG, orig=91, freq=2, tfirst=91, tfreq=2)...
	   Assign 2 to reload r91 (freq=2)
	 Assigning to 93 (cl=CREG, orig=93, freq=2, tfirst=93, tfreq=2)...
	   Assign 2 to reload r93 (freq=2)
	 Assigning to 90 (cl=GENERAL_REGS, orig=62, freq=3, tfirst=90, tfreq=3)...
	   Assign 1 to reload r90 (freq=3)
	 Assigning to 92 (cl=GENERAL_REGS, orig=70, freq=3, tfirst=92, tfreq=3)...
	   Assign 1 to reload r92 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 82
changing reg in insn 60
changing reg in insn 47
changing reg in insn 31
changing reg in insn 14
changing reg in insn 85
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 72
changing reg in insn 72
changing reg in insn 75
changing reg in insn 85
changing reg in insn 89
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 65
changing reg in insn 66
changing reg in insn 70
changing reg in insn 73
changing reg in insn 76
changing reg in insn 74
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 81.


realloc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={35d,28u} r1={14d,8u} r2={9d,3u} r4={7d,2u} r5={11d,6u} r6={1d,30u} r7={1d,16u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={14d,4u} r18={5d} r19={5d} r20={1d,1u,1e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 392{293d,98u,1e} in 68{63 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])
        (reg:DI 5 di [ src ])) malloc.c:179 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ src ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])
        (reg:DI 4 si [ size ])) malloc.c:179 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ size ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])
            (const_int 0 [0]))) malloc.c:183 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) malloc.c:183 621 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 73 74
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:DI 0 ax [73])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])) malloc.c:184 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [73])) malloc.c:184 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [73])
        (nil)))
(call_insn 12 11 13 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) malloc.c:184 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [74])
        (reg:DI 0 ax)) malloc.c:184 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [74])
            (nil))))
(insn 14 13 95 3 (set (reg/f:DI 0 ax [orig:59 D.3341 ] [59])
        (reg/f:DI 0 ax [74])) malloc.c:184 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [74])
        (nil)))
(jump_insn 95 14 96 3 (set (pc)
        (label_ref 83)) malloc.c:184 659 {jump}
     (nil)
 -> 83)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 96 95 17)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 77 78
(code_label 17 96 18 4 39 "" [1 uses])
(note 18 17 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 18 23 4 (set (reg/f:DI 0 ax [78])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])) malloc.c:186 87 {*movdi_internal_rex64}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 0 ax [77])
                (plus:DI (reg/f:DI 0 ax [78])
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:186 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [78])
        (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])
                (const_int -24 [0xffffffffffffffe8]))
            (nil))))
(insn 24 23 25 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])
        (reg:DI 0 ax [77])) malloc.c:186 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [77])
        (nil)))
(insn 25 24 26 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])
            (const_int 0 [0]))) malloc.c:188 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) malloc.c:188 621 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 79
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg:DI 0 ax [79])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])) malloc.c:189 87 {*movdi_internal_rex64}
     (nil))
(insn 29 28 30 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [79])) malloc.c:189 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [79])
        (nil)))
(call_insn 30 29 31 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) malloc.c:189 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 31 30 97 5 (set (reg/f:DI 0 ax [orig:59 D.3341 ] [59])
        (const_int 0 [0])) malloc.c:190 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 97 31 98 5 (set (pc)
        (label_ref 83)) malloc.c:190 659 {jump}
     (nil)
 -> 83)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 98 97 34)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 80 81
(code_label 34 98 35 6 41 "" [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg/f:DI 0 ax [80])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) malloc.c:193 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 6 (set (reg:QI 0 ax [orig:60 D.3342 ] [60])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [80])
                (const_int 1 [0x1])) [0 b_5->kval+0 S1 A8])) malloc.c:193 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [80])
        (nil)))
(insn 38 37 39 6 (set (reg:SI 0 ax [orig:61 D.3343 ] [61])
        (zero_extend:SI (reg:QI 0 ax [orig:60 D.3342 ] [60]))) malloc.c:193 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:60 D.3342 ] [60])
        (nil)))
(insn 39 38 103 6 (set (reg:SI 1 dx [81])
        (const_int 1 [0x1])) malloc.c:193 89 {*movsi_internal}
     (nil))
(insn 103 39 105 6 (set (reg:SI 1 dx [orig:62 D.3343 ] [62])
        (reg:SI 1 dx [81])) malloc.c:193 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [81])
        (nil)))
(insn 105 103 40 6 (set (reg:QI 2 cx [91])
        (reg:QI 0 ax [orig:61 D.3343 ] [61])) malloc.c:193 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:61 D.3343 ] [61])
        (nil)))
(insn 40 105 104 6 (parallel [
            (set (reg:SI 1 dx [orig:62 D.3343 ] [62])
                (ashift:SI (reg:SI 1 dx [orig:62 D.3343 ] [62])
                    (reg:QI 2 cx [91])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:193 521 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [91])
        (nil)))
(insn 104 40 41 6 (set (reg:SI 0 ax [orig:62 D.3343 ] [62])
        (reg:SI 1 dx [orig:62 D.3343 ] [62])) malloc.c:193 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:62 D.3343 ] [62])
        (nil)))
(insn 41 104 42 6 (set (reg:SI 0 ax [orig:63 D.3344 ] [63])
        (reg:SI 0 ax [orig:62 D.3343 ] [62])) malloc.c:193 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:62 D.3343 ] [62])
        (nil)))
(insn 42 41 43 6 (set (reg:DI 0 ax [orig:64 D.3345 ] [64])
        (zero_extend:DI (reg:SI 0 ax [orig:63 D.3344 ] [63]))) malloc.c:193 139 {*zero_extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:63 D.3344 ] [63])
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 0 ax [orig:65 D.3345 ] [65])
                (plus:DI (reg:DI 0 ax [orig:64 D.3345 ] [64])
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:193 274 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:64 D.3345 ] [64])
        (nil)))
(insn 44 43 45 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:65 D.3345 ] [65])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64]))) malloc.c:193 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:65 D.3345 ] [65])
        (nil)))
(jump_insn 45 44 46 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) malloc.c:193 621 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 99 7 (set (reg/f:DI 0 ax [orig:59 D.3341 ] [59])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])) malloc.c:194 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 99 47 100 7 (set (pc)
        (label_ref 83)) malloc.c:194 659 {jump}
     (nil)
 -> 83)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 100 99 50)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 82 83
(code_label 50 100 51 8 42 "" [1 uses])
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg:DI 0 ax [82])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 size+0 S8 A64])) malloc.c:196 87 {*movdi_internal_rex64}
     (nil))
(insn 53 52 54 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [82])) malloc.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [82])
        (nil)))
(call_insn 54 53 55 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) malloc.c:196 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 8 (set (reg/f:DI 0 ax [83])
        (reg:DI 0 ax)) malloc.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [83])
            (nil))))
(insn 56 55 57 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 dst+0 S8 A64])
        (reg/f:DI 0 ax [83])) malloc.c:196 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [83])
        (nil)))
(insn 57 56 58 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 dst+0 S8 A64])
            (const_int 0 [0]))) malloc.c:197 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 58 57 59 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) malloc.c:197 621 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 101 9 (set (reg/f:DI 0 ax [orig:59 D.3341 ] [59])
        (const_int 0 [0])) malloc.c:197 87 {*movdi_internal_rex64}
     (nil))
(jump_insn 101 60 102 9 (set (pc)
        (label_ref 83)) malloc.c:197 659 {jump}
     (nil)
 -> 83)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

(barrier 102 101 63)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 66 67 68 69 70 71 84 85 86 87 88
(code_label 63 102 64 10 43 "" [1 uses])
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg/f:DI 0 ax [84])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 b+0 S8 A64])) malloc.c:198 87 {*movdi_internal_rex64}
     (nil))
(insn 66 65 67 10 (set (reg:QI 0 ax [orig:66 D.3342 ] [66])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [84])
                (const_int 1 [0x1])) [0 b_5->kval+0 S1 A8])) malloc.c:198 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [84])
        (nil)))
(insn 67 66 68 10 (set (reg:SI 0 ax [orig:67 D.3346 ] [67])
        (zero_extend:SI (reg:QI 0 ax [orig:66 D.3342 ] [66]))) malloc.c:198 145 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:66 D.3342 ] [66])
        (nil)))
(insn 68 67 69 10 (parallel [
            (set (reg:SI 0 ax [orig:68 D.3346 ] [68])
                (plus:SI (reg:SI 0 ax [orig:67 D.3346 ] [67])
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:198 273 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:67 D.3346 ] [67])
        (nil)))
(insn 69 68 70 10 (set (reg:SI 0 ax [orig:69 D.3343 ] [69])
        (reg:SI 0 ax [orig:68 D.3346 ] [68])) malloc.c:198 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:68 D.3346 ] [68])
        (nil)))
(insn 70 69 106 10 (set (reg:SI 1 dx [85])
        (const_int 1 [0x1])) malloc.c:198 89 {*movsi_internal}
     (nil))
(insn 106 70 108 10 (set (reg:SI 1 dx [orig:70 D.3343 ] [70])
        (reg:SI 1 dx [85])) malloc.c:198 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [85])
        (nil)))
(insn 108 106 71 10 (set (reg:QI 2 cx [93])
        (reg:QI 0 ax [orig:69 D.3343 ] [69])) malloc.c:198 91 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:69 D.3343 ] [69])
        (nil)))
(insn 71 108 107 10 (parallel [
            (set (reg:SI 1 dx [orig:70 D.3343 ] [70])
                (ashift:SI (reg:SI 1 dx [orig:70 D.3343 ] [70])
                    (reg:QI 2 cx [93])))
            (clobber (reg:CC 17 flags))
        ]) malloc.c:198 521 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:QI 2 cx [93])
        (nil)))
(insn 107 71 72 10 (set (reg:SI 0 ax [orig:70 D.3343 ] [70])
        (reg:SI 1 dx [orig:70 D.3343 ] [70])) malloc.c:198 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:70 D.3343 ] [70])
        (nil)))
(insn 72 107 73 10 (set (reg:DI 1 dx [orig:71 D.3345 ] [71])
        (sign_extend:DI (reg:SI 0 ax [orig:70 D.3343 ] [70]))) malloc.c:198 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:70 D.3343 ] [70])
        (nil)))
(insn 73 72 74 10 (set (reg:DI 2 cx [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])) malloc.c:198 87 {*movdi_internal_rex64}
     (nil))
(insn 74 73 75 10 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 dst+0 S8 A64])) malloc.c:198 87 {*movdi_internal_rex64}
     (nil))
(insn 75 74 76 10 (set (reg:DI 1 dx)
        (reg:DI 1 dx [orig:71 D.3345 ] [71])) malloc.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:71 D.3345 ] [71])
        (nil)))
(insn 76 75 77 10 (set (reg:DI 4 si)
        (reg:DI 2 cx [86])) malloc.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 2 cx [86])
        (nil)))
(insn 77 76 78 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) malloc.c:198 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [87])
        (nil)))
(call_insn 78 77 79 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7f4483412600 memcpy>) [0 __builtin_memcpy S1 A8])
            (const_int 0 [0]))) malloc.c:198 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
                (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                    (nil))))))
(insn 79 78 80 10 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 src+0 S8 A64])) malloc.c:199 87 {*movdi_internal_rex64}
     (nil))
(insn 80 79 81 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) malloc.c:199 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [88])
        (nil)))
(call_insn 81 80 82 10 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) malloc.c:199 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 82 81 83 10 (set (reg/f:DI 0 ax [orig:59 D.3341 ] [59])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 dst+0 S8 A64])) malloc.c:200 87 {*movdi_internal_rex64}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              3 [100.0%] 
;;              5 [100.0%] 
;;              7 [100.0%] 
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 72
(code_label 83 82 84 11 40 "" [4 uses])
(note 84 83 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 89 11 (set (reg:DI 0 ax [orig:72 <retval> ] [72])
        (reg/f:DI 0 ax [orig:59 D.3341 ] [59])) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:59 D.3341 ] [59])
        (nil)))
(insn 89 85 92 11 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:72 <retval> ] [72])) malloc.c:201 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:72 <retval> ] [72])
        (nil)))
(insn 92 89 0 11 (use (reg/i:DI 0 ax)) malloc.c:201 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function main (main, funcdef_no=11, decl_uid=3166, cgraph_uid=11)


********** Local #1: **********

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) re {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) Z {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) m  (1) re {*movdi_internal_rex64}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rzw {*call}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) rem {*movdi_internal_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 47
changing reg in insn 50
changing reg in insn 50
changing reg in insn 54
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={27d,22u} r1={12d} r2={12d} r4={14d,2u} r5={23d,11u} r6={1d,14u} r7={1d,13u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={11d} r18={11d} r19={11d} r20={1d,1u} r21={12d} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} 
;;    total ref usage 593{530d,63u,0e} in 46{35 regular + 11 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 5 di)
        (const_int 70 [0x46])) test.c:5 87 {*movdi_internal_rex64}
     (nil))
(call_insn 6 5 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) test.c:5 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [61])
        (reg:DI 0 ax)) test.c:5 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [61])
            (nil))))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])
        (reg/f:DI 0 ax [61])) test.c:5 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [61])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (const_int 35 [0x23])) test.c:6 87 {*movdi_internal_rex64}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) test.c:6 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [62])
        (reg:DI 0 ax)) test.c:6 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [62])
            (nil))))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
        (reg/f:DI 0 ax [62])) test.c:6 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [62])
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (const_int 80 [0x50])) test.c:7 87 {*movdi_internal_rex64}
     (nil))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) test.c:7 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [63])
        (reg:DI 0 ax)) test.c:7 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [63])
            (nil))))
(insn 16 15 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 C+0 S8 A64])
        (reg/f:DI 0 ax [63])) test.c:7 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [63])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (const_int 60 [0x3c])) test.c:8 87 {*movdi_internal_rex64}
     (nil))
(call_insn 18 17 19 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x3]  <function_decl 0x7f448343e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) test.c:8 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [64])
        (reg:DI 0 ax)) test.c:8 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [64])
            (nil))))
(insn 20 19 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 D+0 S8 A64])
        (reg/f:DI 0 ax [64])) test.c:8 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [64])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 0 ax [65])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) test.c:9 87 {*movdi_internal_rex64}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [65])) test.c:9 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [65])
        (nil)))
(call_insn 23 22 24 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) test.c:9 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 2 (set (reg:DI 0 ax [66])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 D+0 S8 A64])) test.c:10 87 {*movdi_internal_rex64}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [66])) test.c:10 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [66])
        (nil)))
(call_insn 26 25 27 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) test.c:10 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 2 (set (reg:DI 0 ax [67])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 C+0 S8 A64])) test.c:11 87 {*movdi_internal_rex64}
     (nil))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [67])) test.c:11 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [67])
        (nil)))
(call_insn 29 28 30 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) test.c:11 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 30 29 31 2 (set (reg:DI 4 si)
        (const_int 70 [0x46])) test.c:13 87 {*movdi_internal_rex64}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (const_int 2 [0x2])) test.c:13 87 {*movdi_internal_rex64}
     (nil))
(call_insn 32 31 33 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x3]  <function_decl 0x7f4483430800 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) test.c:13 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [68])
        (reg:DI 0 ax)) test.c:13 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [68])
            (nil))))
(insn 34 33 35 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])
        (reg/f:DI 0 ax [68])) test.c:13 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [68])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 0 ax [69])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) test.c:14 87 {*movdi_internal_rex64}
     (nil))
(insn 36 35 37 2 (set (reg:DI 4 si)
        (const_int 150 [0x96])) test.c:14 87 {*movdi_internal_rex64}
     (nil))
(insn 37 36 38 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [69])) test.c:14 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [69])
        (nil)))
(call_insn 38 37 39 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x3]  <function_decl 0x7f4483441400 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) test.c:14 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 39 38 40 2 (set (reg:DI 0 ax [70])
        (reg:DI 0 ax)) test.c:14 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 40 39 41 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])
        (reg:DI 0 ax [70])) test.c:14 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [70])
        (nil)))
(insn 41 40 42 2 (set (reg:DI 0 ax [71])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 A+0 S8 A64])) test.c:15 87 {*movdi_internal_rex64}
     (nil))
(insn 42 41 43 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [71])) test.c:15 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [71])
        (nil)))
(call_insn 43 42 44 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) test.c:15 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 44 43 45 2 (set (reg:DI 0 ax [72])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 B+0 S8 A64])) test.c:16 87 {*movdi_internal_rex64}
     (nil))
(insn 45 44 46 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [72])) test.c:16 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [72])
        (nil)))
(call_insn 46 45 47 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x3]  <function_decl 0x7f4483436d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) test.c:16 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
(insn 47 46 50 2 (set (reg:SI 0 ax [orig:59 D.3347 ] [59])
        (const_int 0 [0])) test.c:18 89 {*movsi_internal}
     (nil))
(insn 50 47 54 2 (set (reg:SI 0 ax [orig:60 <retval> ] [60])
        (reg:SI 0 ax [orig:59 D.3347 ] [59])) test.c:18 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:59 D.3347 ] [59])
        (nil)))
(insn 54 50 57 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:60 <retval> ] [60])) test.c:19 89 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:60 <retval> ] [60])
        (nil)))
(insn 57 54 0 2 (use (reg/i:SI 0 ax)) test.c:19 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

